"""
Main script to simplify setup for multiple runs
"""

import timeit
from multi_gene_PCA import PCACalculator, RunParams, AlignmentParams
from PCA_visualization import PCAVisualizer, ClusteringParams, VisualizationParams


def time_function(func, *args, **kwargs):
    """Utility function to time the execution of a function."""
    start_time = timeit.default_timer()
    print(f"Starting function {func.__name__} || time: {start_time:.2f}")
    result = func(*args, **kwargs)
    elapsed = timeit.default_timer() - start_time
    print(f"Function {func.__name__} completed in {elapsed:.2f} seconds.")
    return result


if __name__ == "__main__":
    PDB_DIRECTORIES_BASE = (
        "C:\\Users\\cramerj\\OneDrive - Vanderbilt\\Documents\\AF2_result"
    )
    # Run Params
    RUN_PARAMS = RunParams(
        pdb_dirs=[
            f"{PDB_DIRECTORIES_BASE}\\{_}"
            for _ in [
                # "Penguin",
                "Penguin_w_dropout",
                "Bos_mutus_w_dropout",
                "Camelus_ferus_w_dropout",
                "Chrysemys_picta_bellii_w_dropout",
                "Dryophytes_japonicus_w_dropout",
                "Jaculus_jaculus_w_dropout",
                "Nanorana_parkeri_w_dropout",
                # "All_Wood_Frog",
                "Wood_Frog_w_dropout_all",
            ]
        ],
        msa_path="C:\\Users\\cramerj\\Code\\ColabFold_Augmentation\\ColabFold_Augment\\PCA\\200_seq_alignment_no_speech_AF.aln-clustal_num",
        output_dir="C:\\Users\\cramerj\\Code\\ColabFold_Augmentation\\ColabFold_Augment\\PCA\\PCA_output",
        run_name="Multi_No_SPAF_No_Loops_02",
    )

    ALIGNMENT_PARAMS = AlignmentParams(
        atom_selection="CA",
        num_iterations=3,
        residues_to_exclude=[
            1,
            5,
            18,
            23,
            24,
            25,
            26,
            28,
            29,
            30,
            33,
            35,
            36,
            37,
            38,
            42,
            47,
            48,
            49,
            51,
            52,
            53,
            54,
            58,
            75,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            95,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            134,
            138,
            139,
            145,
            146,
            147,
            148,
            149,
            168,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            192,
            194,
            198,
            201,
            202,
            203,
            204,
            205,
            208,
            209,
            225,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            239,
            243,
            244,
            245,
            248,
            249,
            250,
            251,
            252,
            255,
            256,
            257,
            258,
            259,
            260,
            271,
            273,
            274,
            275,
            276,
            277,
            278,
            279,
            281,
            282,
            283,
            284,
            285,
            287,
            290,
            291,
            295,
            306,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            321,
            322,
            345,
            351,
            352,
            353,
            354,
            355,
            361,
        ],
    )

    CLUSTERING_PARAMS = ClusteringParams(
        range_pcs_for_clustering=[1, 3],
        min_cluster_size=15,
    )

    VISUALIZATION_PARAMS = VisualizationParams(
        pcs_to_plot_2d=[[6, 7]],
        pcs_to_plot_3d=None,
        range_frames=(50, 200),
        k_neighbors=1000,
        cluster_start=0,
        cluster_end=1,
    )

    # Loop Residues from common core
    # LOOP_RESIDUES = [
    #     5,
    #     23,
    #     24,
    #     25,
    #     26,
    #     38,
    #     54,
    #     80,
    #     81,
    #     82,
    #     83,
    #     91,
    #     92,
    #     93,
    #     94,
    #     95,
    #     96,
    #     97,
    #     98,
    #     99,
    #     100,
    #     101,
    #     102,
    #     103,
    #     104,
    #     105,
    #     106,
    #     107,
    #     108,
    #     109,
    #     110,
    #     111,
    #     112,
    #     113,
    #     114,
    #     115,
    #     116,
    #     117,
    #     139,
    #     140,
    #     141,
    #     144,
    #     145,
    #     146,
    #     149,
    #     174,
    #     175,
    #     176,
    #     177,
    #     198,
    #     204,
    #     205,
    #     231,
    #     232,
    #     233,
    #     234,
    #     245,
    #     246,
    #     247,
    #     251,
    #     252,
    #     256,
    #     277,
    #     285,
    #     286,
    #     291,
    #     312,
    #     313,
    #     314,
    #     315,
    #     316,
    #     317,
    #     318,
    #     351,
    #     352,
    #     353,
    #     354,
    #     355,
    # ]

    # PCA Calculator

    # # Initialize the MultiGenePCA class
    # pca = PCACalculator(
    #     run_params=RUN_PARAMS,
    #     alignment_params=ALIGNMENT_PARAMS,
    # )
    # time_function(pca.run)

    # PCA Visualizer
    pca_visualizer = PCAVisualizer(
        run_params=RUN_PARAMS,
        clustering_params=CLUSTERING_PARAMS,
        viz_params=VISUALIZATION_PARAMS,
    )
    time_function(pca_visualizer.run_clustering)
    time_function(pca_visualizer.generate_plots)
    time_function(pca_visualizer.generate_animation)